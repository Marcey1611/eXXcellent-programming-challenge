@startuml

interface DataRecord {
    + String getLabel()
    + int getDiff()
}

interface DataParser<T extends DataRecord> {
    + List<T> parseLines(List<String> lines)
}

interface DataRecordFactory<T extends DataRecord> {
    + T createFromTokens(String[] tokens)
}

class CsvReader {
    + List<String> readFile(String path)
}

class DataAnalyzer<T extends DataRecord> {
    + T findWithSmallestDiff(List<T> records)
}

class ApplicationRunner {
    - CsvReader csvReader
    - DataParser parser
    - DataAnalyzer analyzer
    + void main (String[] args)
    - void run(String filepath)
}

class WeatherDataRecord implements DataRecord {
    - String day
    - int maxTemp
    - int minTemp
    + String getLabel()
    + int getDiff()
}

class WeatherDataParser implements DataParser<WeatherDataRecord> {
    - DataRecordFactory<WeatherDataRecord> factory
    + List<WeatherDataRecord> parseLines(List<String> lines)
}

class FootballDataRecord implements DataRecord {
    - String teamName
    - int goals
    - int goalsAllowed
    + String getLabel()
    + int getDiff()
}

class FootballDataParser implements DataParser<FootballDataRecord> {
    - DataRecordFactory<FootballDataRecord> factory
    + List<FootballDataRecord> parseLines(List<String> lines)
}

class WeatherRecordFactory implements DataRecordFactory<WeatherDataRecord> {
    + WeatherDataRecord createFromTokens(String[] tokens)
}

class FootballRecordFactory implements DataRecordFactory<FootballDataRecord> {
    + FootballDataRecord createFromTokens(String[] tokens)
}

DataRecord <|.. WeatherDataRecord
DataRecord <|.. FootballDataRecord

DataParser <|.. WeatherDataParser
DataParser <|.. FootballDataParser

DataRecordFactory <|.. WeatherRecordFactory
DataRecordFactory <|.. FootballRecordFactory

WeatherDataParser --> WeatherRecordFactory
FootballDataParser --> FootballRecordFactory

ApplicationRunner --> CsvReader
ApplicationRunner --> DataParser
ApplicationRunner --> DataAnalyzer

@enduml
